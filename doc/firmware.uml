// Copyright (c) 2013, Henrik Brix Andersen <henrik@brixandersen.dk>
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice, this
//   list of conditions and the following disclaimer in the documentation and/or
//   other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
// ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#include "statediagrams.uml"

// States
#define S_INIT_GYR   "{ INIT_GYR | entry / gyr_init() }"
#define S_INIT_ACC   "{ INIT_ACC | entry / acc_init() }"
#define S_INIT_MAG   "{ INIT_MAG | entry / mag_init() }"
#define S_SLEEP      "{ SLEEP | entry / sleep() }"
#define S_LOOP       "{ LOOP | }"
#define S_RD_GYR     "{ RD_GYR | entry / gyr_read()\nexit / gyr_rdy=0 }"
#define S_RD_ACC     "{ RD_ACC | entry / acc_read()\nexit / acc_rdy=0 }"
#define S_RD_MAG     "{ RD_MAG | entry / mag_read()\nexit / mag_rdy=0 }"

digraph "IMUco Firmware State Diagram" {
	// States
	start();
	state(S_INIT_GYR);
	state(S_INIT_ACC);
	state(S_INIT_MAG);
	state(S_LOOP);
	state(S_RD_GYR);
	state(S_RD_ACC);
	state(S_RD_MAG);

	// Initialize gyrscope
	transition(S_START, S_INIT_GYR, "");
	transition(S_INIT_GYR, S_INIT_GYR, "I2C_IRQ / gyr_i2c_irq()");

	// Initialize accerometer
	transition(S_INIT_GYR, S_INIT_ACC, "GYR_INIT_CB");
	transition(S_INIT_ACC, S_INIT_ACC, "I2C_IRQ / acc_i2c_irq()");

	// Initialize magetometer
	transition(S_INIT_ACC, S_INIT_MAG, "GYR_INIT_CB");
	transition(S_INIT_MAG, S_INIT_MAG, "I2C_IRQ / mag_i2c_irq()");

	// Loop
	transition(S_INIT_MAG, S_LOOP, "MAG_INIT_CB");
	transition(S_LOOP, S_LOOP, "GYR_IRQ / gyr_rdy=1");
	transition(S_LOOP, S_LOOP, "ACC_IRQ / acc_rdy=1");
	transition(S_LOOP, S_LOOP, "MAG_IRQ / mag_rdy=1");

	// Read gyrscope
	transition(S_LOOP, S_RD_GYR, "[gyr_rdy==1]");
	transition(S_RD_GYR, S_LOOP, "GYR_DATA_CB");
	transition(S_RD_GYR, S_RD_GYR, "I2C_IRQ / gyr_i2c_irq()");

	// Read accerometer
	transition(S_LOOP, S_RD_ACC, "[acc_rdy==1]");
	transition(S_RD_ACC, S_LOOP, "ACC_DATA_CB");
	transition(S_RD_ACC, S_RD_ACC, "I2C_IRQ / acc_i2c_irq()");

	// Read magetometer
	transition(S_LOOP, S_RD_MAG, "[mag_rdy==1]");
	transition(S_RD_MAG, S_LOOP, "MAG_DATA_CB");
	transition(S_RD_MAG, S_RD_MAG, "I2C_IRQ / mag_i2c_irq()");
}
