// Copyright (c) 2013, Henrik Brix Andersen <henrik@brixandersen.dk>
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice, this
//   list of conditions and the following disclaimer in the documentation and/or
//   other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
// ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#include "statediagrams.uml"

// States
#define S_INIT_I2C       "{ INIT_I2C | entry / i2c_init() }"
#define S_INIT_ITG3200   "{ INIT_ITG3200 | entry / itg3200_init() }"
#define S_INIT_ADXL345   "{ INIT_ADXL345 | entry / adxl345_init() }"
#define S_INIT_HMC5883L  "{ INIT_HMC5883L | entry / hmc5883l_init() }"
#define S_SLEEP          "{ SLEEP | entry / sleep() }"
#define S_LOOP           "{ LOOP | }"
#define S_RD_ITG3200     "{ RD_ITG3200 | entry / itg3200_read()\nexit / itg3200_rdy=0 }"
#define S_RD_ADXL345     "{ RD_ADXL345 | entry / adxl345_read()\nexit / adxl345_rdy=0 }"
#define S_RD_HMC5883L    "{ RD_HMC5883L | entry / hmc5883l_read()\nexit / hmc5883l_rdy=0 }"

digraph "IMUco Firmware State Diagram" {
	// States
	start();
	state(S_INIT_I2C);
	state(S_INIT_ITG3200);
	state(S_INIT_ADXL345);
	state(S_INIT_HMC5883L);
	state(S_LOOP);
	state(S_RD_ITG3200);
	state(S_RD_ADXL345);
	state(S_RD_HMC5883L);

	// Initialize i2c
	transition(S_START, S_INIT_I2C, "");

	// Initialize gyrscope
	transition(S_INIT_I2C, S_INIT_ITG3200, "");
	transition(S_INIT_ITG3200, S_INIT_ITG3200, "I2C_IRQ / itg3200_i2c_isr()");

	// Initialize accerometer
	transition(S_INIT_ITG3200, S_INIT_ADXL345, "ITG3200_INIT_CB");
	transition(S_INIT_ADXL345, S_INIT_ADXL345, "I2C_IRQ / adxl345_i2c_isr()");

	// Initialize magetometer
	transition(S_INIT_ADXL345, S_INIT_HMC5883L, "ITG3200_INIT_CB");
	transition(S_INIT_HMC5883L, S_INIT_HMC5883L, "I2C_IRQ / hmc5883l_i2c_isr()");

	// Loop
	transition(S_INIT_HMC5883L, S_LOOP, "HMC5883L_INIT_CB");
	transition(S_LOOP, S_LOOP, "ITG3200_IRQ / itg3200_rdy=1");
	transition(S_LOOP, S_LOOP, "ADXL345_IRQ / adxl345_rdy=1");
	transition(S_LOOP, S_LOOP, "HMC5883L_IRQ / hmc5883l_rdy=1");

	// Read gyroscope
	transition(S_LOOP, S_RD_ITG3200, "[itg3200_rdy==1]");
	transition(S_RD_ITG3200, S_LOOP, "ITG3200_DATA_CB");
	transition(S_RD_ITG3200, S_RD_ITG3200, "I2C_IRQ / itg3200_i2c_isr()");

	// Read accerometer
	transition(S_LOOP, S_RD_ADXL345, "[adxl345_rdy==1]");
	transition(S_RD_ADXL345, S_LOOP, "ADXL345_DATA_CB");
	transition(S_RD_ADXL345, S_RD_ADXL345, "I2C_IRQ / adxl345_i2c_isr()");

	// Read magnetometer
	transition(S_LOOP, S_RD_HMC5883L, "[hmc5883l_rdy==1]");
	transition(S_RD_HMC5883L, S_LOOP, "HMC5883L_DATA_CB");
	transition(S_RD_HMC5883L, S_RD_HMC5883L, "I2C_IRQ / hmc5883l_i2c_isr()");
}
